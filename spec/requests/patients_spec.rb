require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/patients", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Patient. As you add validations to Patient, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      first_name: Faker::Name.first_name,
      last_name: Faker::Name.last_name,
      date_of_birth: Faker::Date.birthday(min_age: 18, max_age: 90)
    }
  end

  let(:invalid_attributes) do
    {
      first_name: nil,
      middle_name: nil,
      last_name: nil,
      date_of_birth: nil
    }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # PatientsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  describe "GET /index" do
    it "renders a successful response" do
      Patient.create! valid_attributes
      get patients_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      patient = Patient.create! valid_attributes
      get patient_url(patient), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Patient" do
        expect do
          post patients_url,
               params: { patient: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Patient, :count).by(1)
      end

      it "renders a JSON response with the new patient" do
        post patients_url,
             params: { patient: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Patient" do
        expect do
          post patients_url,
               params: { patient: invalid_attributes }, as: :json
        end.to change(Patient, :count).by(0)
      end

      it "renders a JSON response with errors for the new patient" do
        post patients_url,
             params: { patient: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        {
          first_name: Faker::Name.first_name,
          middle_name: Faker::Name.middle_name,
          last_name: Faker::Name.last_name,
        }
      end

      it "updates the requested patient" do
        patient = Patient.create! valid_attributes
        patch patient_url(patient),
              params: { patient: new_attributes }, headers: valid_headers, as: :json
        patient.reload
        expect(patient.first_name).to eq(new_attributes[:first_name])
        expect(patient.middle_name).to eq(new_attributes[:middle_name])
        expect(patient.last_name).to eq(new_attributes[:last_name])
      end

      it "renders a JSON response with the patient" do
        patient = Patient.create! valid_attributes
        patch patient_url(patient),
              params: { patient: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the patient" do
        patient = Patient.create! valid_attributes
        patch patient_url(patient),
              params: { patient: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested patient" do
      patient = Patient.create! valid_attributes
      expect do
        delete patient_url(patient), headers: valid_headers, as: :json
      end.to change(Patient, :count).by(-1)
    end
  end
end
